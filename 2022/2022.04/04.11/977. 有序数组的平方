--题目--

给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。


示例 1：

输入：nums = [-4,-1,0,3,10]
输出：[0,1,9,16,100]
解释：平方后，数组变为 [16,1,0,9,100]
排序后，数组变为 [0,1,9,16,100]


示例 2：

输入：nums = [-7,-3,2,3,11]
输出：[4,9,9,49,121]
 

提示：

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums 已按 非递减顺序 排序
 

进阶：

请你设计时间复杂度为 O(n) 的算法解决本问题

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/squares-of-a-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


--代码--

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        if(nums[0] >= 0) {   //数字全部为正数的情况
            for (int i = 0; i < nums.size(); i++) {
                nums[i] = nums[i] * nums[i];
            }
            return nums;
        } else {
            vector<int> nums_new;
            if (nums[nums.size() - 1] < 0) {     //数字全部为负数的情况
                for (int i = nums.size() - 1; i >= 0 ; i--) {
                    nums_new.push_back(nums[i] * nums[i]);
                }
            } else {      //有正有负的情况
                int left, right, i;
                for (i = 0; i < nums.size(); i++) {
                    if (nums[i + 1] >= 0) {
                        break;
                    }
                }
                left = i;
                right = i + 1;
                while (left >= 0 && right < nums.size()) {
                    if (-nums[left] >= nums[right]) {
                        nums_new.push_back(nums[right] * nums[right]);
                        right++;
                    }
                    else {
                        nums_new.push_back(nums[left] * nums[left]);
                        left--;
                    }
                }
                while (left >= 0)  {
                    nums_new.push_back(nums[left] * nums[left]);
                    left--;
                }
                while (right < nums.size()) {
                    nums_new.push_back(nums[right] * nums[right]);
                    right++;
                }
            }
            return nums_new;
        }
    }
};
